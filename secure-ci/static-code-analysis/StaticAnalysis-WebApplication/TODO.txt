LabExam 2022-01-15: Static Code Analysis
-------------------------------------------------------------------------------

Tools Setup:

i) SpotBugs + FindSecBugs Plugin
    project.home = ../StaticCodeAnalysis-WebApplication

ii) DependencyChecker
    target.home =../StaticCodeAnalysis-WebApplication
    target.lib = ${target.home}/target/StaticCodeAnalysis-WebApplication/WEB-INF/lib


A) List all security relevant findings together with the corresponding code fragments.

M V EI2: org.se.lab.business.AbstractService.setConnection(Connection) may expose internal representation by storing an externally mutable object into AbstractService.connection  At AbstractService.java:[line 20]
M V EI2: org.se.lab.data.AbstractDAOImpl.setConnection(Connection) may expose internal representation by storing an externally mutable object into AbstractDAOImpl.connection  At AbstractDAOImpl.java:[line 23]

M S SECSHA1: This API SHA-1 (SHA-1) is not a recommended cryptographic hash function  At UserServiceImpl.java:[line 61]

M S SECSQLIJDBC: This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)  At UserDAOMySQLImpl.java:[line 27]
L S SQL: org.se.lab.data.UserDAOMySQLImpl.isValidUser(String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement  At UserDAOMySQLImpl.java:[line 27]

L S SECSP: The method getParameter returns a String value that is controlled by the client  At ControllerServlet.java:[line 30]
L S SECSP: The method getParameter returns a String value that is controlled by the client  At LoginCommand.java:[line 18]
L S SECSP: The method getParameter returns a String value that is controlled by the client  At LoginCommand.java:[line 19]


B) Priorize the findings (what would you fix first) and describe possible
    improvements in the code.

M S SECSQLIJDBC: This use of java/sql/Statement.executeQuery(Ljava/lang/String;)Ljava/sql/ResultSet; can be vulnerable to SQL injection (with JDBC)  At UserDAOMySQLImpl.java:[line 27]
L S SQL: org.se.lab.data.UserDAOMySQLImpl.isValidUser(String, String) passes a nonconstant String to an execute or addBatch method on an SQL statement  At UserDAOMySQLImpl.java:[line 27]

L S SECSP: The method getParameter returns a String value that is controlled by the client  At ControllerServlet.java:[line 30]
L S SECSP: The method getParameter returns a String value that is controlled by the client  At LoginCommand.java:[line 18]
L S SECSP: The method getParameter returns a String value that is controlled by the client  At LoginCommand.java:[line 19]

L S SECSFDR: RequestDispatcher populated with user controlled parameters  At ControllerServlet.java:[line 74]
L S SECSFDR: RequestDispatcher populated with user controlled parameters  At WebCommand.java:[line 37]

M S SECSHA1: This API SHA-1 (SHA-1) is not a recommended cryptographic hash function  At UserServiceImpl.java:[line 61]

M V EI2: org.se.lab.business.AbstractService.setConnection(Connection) may expose internal representation by storing an externally mutable object into AbstractService.connection  At AbstractService.java:[line 20]
M V EI2: org.se.lab.data.AbstractDAOImpl.setConnection(Connection) may expose internal representation by storing an externally mutable object into AbstractDAOImpl.connection  At AbstractDAOImpl.java:[line 23]


C) Do you also find some more vulnerabilities during a manual code review?
    (list the code fragments and possible improvements) [Extra points]
    - No HTTPS configured in the web.xml
    - LoginCommand:[line 25] No output encoding
        req.setAttribute("message", "Login successful, welcome " + username + ":-)");
        => XSS Vulnerability
