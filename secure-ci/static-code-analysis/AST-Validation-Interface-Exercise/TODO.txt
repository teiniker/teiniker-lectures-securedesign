Exercise: Interface Validator
---------------------------------------------------------------------

The interface validator uses a Visitor Pattern to perform a validation
of an existing interface model.
The Visitor object visits each node in the model and examines its data.
In addition, the visitor also takes over the navigation between
the nodes of the model.

1. Identifier Validator
---------------------------------------------------------------------
Implement a Visitor named "IdentifierValidator" which inherits the
"AbstractValidator".
This validator should check the identifiers (= names) of the following
nodes:
	- MPackage
	- MInterface
	- MOperation
	- MParameter
	- MType

A valid identifier should not be null and also not equal to "".

Use the IdentifierValidatorTest class to verify your implementation.


2. Method-Name Validator
---------------------------------------------------------------------
Implement a Visitor named "MethodNameValidator" that inherits the
abstract class AbstractValidator.
This validator should check if the methods names (= MOperation.name)
start with a lowercase letter. All violations of this rule should be
stored in a list called "upperCaseMethods".

Use the class "MethodNameValidatorTest" to verify your implementation.

Tip: Use the method: Character.isUpperCase ()

