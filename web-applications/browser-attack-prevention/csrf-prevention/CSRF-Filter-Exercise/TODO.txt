Exercise: CSRF Protection Filter (Simplified)
-------------------------------------------------------------------------------

Given a simple implementation of a shopping cart.

A) CSRF Attack
Deploy and access the Web Application: CSRF-Filter-Exercise
$ mvn wildfly:deploy
URL: https://localhost:8443/CSRF-Filter-Exercise
You can [Login], add products to the cart, and [Logout]

In the project CSRF-Attack, change the index.html to:
<form method="post" action="https://localhost:8443/CSRF-Filter-Exercise/controller">

Deploy and access the attacker's page: CSRF-Attack
$ mvn wildfly:deploy
URL: https://localhost:8443/CSRF-Attack
If you push the [Add] button, the CSRF attack will be performed.


B) CSRF Filter
---------------
To prevent CSRF attacks, implement a Servlet filter called "CSRFFilter".

a) Add a hidden field to every HTML form of the Controller servlet:
    <input type = "hidden" name = "csrf_token" value="CSRF_TOKEN"/>

b) In the "init()" method generate a 16 byte random hex string.

c) In the "doFilter()" method:
    Use the "ResponseWrapper" to intercept the response content.
    In the content replace the string "CSRF_TOKEN" with the generated hex string.

    Read the HTTP request parameter "csrf_token".
    Read the session object from the HTTP request.
    If there is a valid session (Session object != null) and the received
    CRSF token from the request doesn't match the stored CSRF token (hex string)
    an error page should be returned to the client:
    <html>
      <head>
        <title>CSRF Filter</title>
      </head>
      <body>
            <h2>Rejected request!!</h2>
      </body>
    </html>

Test your implementation manually by performing the described CSRF attack (A).

Tip: Use ZAP to analyze the HTTP request and response messages.
